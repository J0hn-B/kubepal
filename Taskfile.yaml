## #  Description: Taskfile for k3d cluster

## # In the tasks below, a mix of shell commands combined with Go templates is used as a way to make the tasks more dynamic
## # and record the go template syntax for future use.

version: "3"

env:
  CLUSTER_NAME: pattern
  KUBE: export KUBECONFIG=/mnt/c/Users/{{.USER}}/.kube/config

# Include the helper tasks
includes:
  run: utils/helper_tasks.yml

tasks:
  create:
    desc: |
      Create and access a k3d cluster.

      If operating on WSL, the KUBECONFIG env var will point to the Windows host.

      {{ if and (eq OS "windows") (eq (env "KUBECONFIG") "") }}Kubeconfig path: {{.USERPROFILE}}\.kube\config{{end}}

    cmds:
      # If KUBECONFIG env var is not set, set it to point to the Windows host
      - '{{if eq OS "linux"}}[ -z "$KUBECONFIG" ] && echo "Set KUBECONFIG env var ==> {{.KUBE}}" && exit 1 || k3d cluster create {{.CLUSTER_NAME}} --agents 2{{end}}'
      # is host is Windows, create cluster
      - '{{if eq OS "windows"}}k3d cluster create {{.CLUSTER_NAME}} --agents 2{{end}}'

    status:
      - k3d cluster list | grep {{.CLUSTER_NAME}} # If cluster exists, skip the task
    silent: true

  tf_init:
    desc: "Initialize terraform"
    cmds:
      - terraform -chdir=kube/bootstrap init
    status: # If terraform is initialized, skip the task
      - terraform -chdir=kube/bootstrap state list

  deploy:
    desc: "Bootstrap cluster and deploy apps"
    cmds:
      - task: create
      - task: tf_init
      - terraform -chdir=kube/bootstrap apply -auto-approve

  delete:
    desc: "Delete cluster"
    cmds:
      - k3d cluster delete {{.CLUSTER_NAME}}
      - rm -rf kube/bootstrap/.terraform
      - rm -rf kube/bootstrap/.terraform.lock.hcl
    silent: true
